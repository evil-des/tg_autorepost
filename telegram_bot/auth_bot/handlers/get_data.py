from aiogram import types
from misc import dp, bot, config
from telegram_bot.utils.variables import tg_accounts
from telegram_bot.utils.db import User, session, TelegramAccount
from keyboards.inline import add_proxy_menu, submit_account
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from sqlalchemy.exc import IntegrityError, PendingRollbackError
from telegram_bot.classes.TgAccount import TgAccount
from telethon.errors.rpcerrorlist import PhoneNumberInvalidError, SessionPasswordNeededError, PhoneCodeInvalidError, \
    PhoneCodeExpiredError
from telebot import TeleBot


class TelegramAccountData(StatesGroup):
    phone = State()
    proxy = State()
    validate = State()
    phone_code = State()
    password = State()


# HANDLERS
@dp.message_handler(state=TelegramAccountData.phone)
async def set_phone(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω!")

    elif message.text.strip("+").strip().isnumeric():
        await state.update_data(phone=int(message.text.strip("+").strip()))
        await message.answer("‚ùï <b>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>login:password@ip:port (SOCKS)</code></b>",
                             reply_markup=add_proxy_menu())
        await TelegramAccountData.proxy.set()

    else:
        await message.answer("‚ùï –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ª–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>")
        await TelegramAccountData.phone.set()


@dp.message_handler(state=TelegramAccountData.proxy)
async def set_proxy(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω!")

    elif len(message.text.split("@")) == 2:
        login_pass, ip_port = [x.split(":") for x in message.text.split("@")]  # –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø—Ä–æ–∫—Å–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
        login, password, ip, port = login_pass + ip_port

        await state.update_data(login=login, password=password, ip=ip, port=port)
        user_data = await state.get_data()

        await message.answer(f"üì± <b>–ù–æ–º–µ—Ä</b>: <code>{user_data.get('phone')}</code>\n"
                             f"üì° <b>–ü—Ä–æ–∫—Å–∏</b>:\n"
                             f"|- <b>IP</b>: <code>{ip}</code>\n"
                             f"|- <b>LOGIN</b>: <code>{login}</code>\n"
                             f"|- <b>PASSWORD</b>: <code>{password}</code>\n"
                             f"|- <b>PORT</b>: <code>{port}</code>",
                             reply_markup=submit_account())
        await TelegramAccountData.validate.set()

    else:
        await message.answer("‚ùï –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –≤ –≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ª–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>")
        await TelegramAccountData.proxy.set()


@dp.callback_query_handler(text="submit_account", state=TelegramAccountData.validate)
async def validate(callback: types.CallbackQuery, state: FSMContext):
    user = User.query.filter(User.chat_id == callback.message.chat.id).first()
    user_data = await state.get_data()

    account = TgAccount(phone=user_data.get('phone'))

    try:
        await state.update_data(account_id=account.id)
        await account.send_code_request()

        await callback.message.answer("üí¨ <b>–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥:</b>")
        await TelegramAccountData.phone_code.set()
    except PhoneNumberInvalidError:
        await callback.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞! –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ")
        await callback.message.answer("üì± <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram (–ë–µ–∑ + –∏ –ø—Ä–æ–±–µ–ª–æ–≤):</b>")

        await TelegramAccountData.phone.set()


@dp.message_handler(state=TelegramAccountData.validate)
async def validate_error(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ!")

    else:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–í—Å–µ –≤–µ—Ä–Ω–æ</b>, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–∞—è –≤–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, "
                             "–ª–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>")


@dp.message_handler(state=TelegramAccountData.phone_code)
async def set_phone_code(message: types.Message, state: FSMContext):
    user = User.query.filter(User.chat_id == message.chat.id).first()
    user_data = await state.get_data()
    account = tg_accounts.get(user_data.get('account_id'))

    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω!")

    elif account and len(message.text) > 1 and message.text.isnumeric():
        await auth_account(user, account, message, state, user_data)

    else:
        await message.answer("üí¨ <b>–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥, –ª–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞:</b>")
        await TelegramAccountData.phone_code.set()


@dp.message_handler(state=TelegramAccountData.password)
async def set_password(message: types.Message, state: FSMContext):
    user = User.query.filter(User.chat_id == message.chat.id).first()
    user_data = await state.get_data()
    account = tg_accounts.get(user_data.get('account_id'))

    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω!")

    elif len(message.text) > 1:
        await auth_account(user, account, message, state, user_data, password=message.text.strip())
        await state.finish()


# util functions
async def auth_account(user, account, message, state, user_data, password=None):
    try:
        await account.auth(code=message.text, password=password)
        await add_account(account, user, message, user_data, state, password)

    except PhoneCodeInvalidError:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π, –ª–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>:")
        await TelegramAccountData.phone_code.set()

    except PhoneCodeExpiredError:
        await message.answer("–ö–æ–¥ –∏—Å—Ç–µ–∫! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π, –ª–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>:")
        await TelegramAccountData.phone_code.set()

    except SessionPasswordNeededError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>:")
        await TelegramAccountData.password.set()


async def add_account(account, user, message, user_data, state, password=None):
    user_info = await account.get_user_info()
    proxy = f"{user_data.get('login')}:{user_data.get('password')}@{user_data.get('ip')}:{user_data.get('port')}"

    # —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ë–î –º–æ–¥–µ–ª–∏ TelegramAccount
    account_ = TelegramAccount(user_id=user.id, chat_id=user_info.get('chat_id'),
                               phone=user_data.get('phone'), username=user_info.get('username'),
                               fullname=user_info.get('fullname'), password=password, proxy=proxy)

    try:
        # –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –µ–≥–æ –∏–∑ –æ–±—â–µ–≥–æ –ø—É–ª–ª–∞
        await account.stop()

        session.add(account_)
        session.commit()

        await message.answer("–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–∞ –±–æ—Ç–∞.")
        message_id, service = user_data.get('payload').split(':')

        # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        bot_ = TeleBot(config['bot']['token'], parse_mode='html')
        # bot_.edit_message_reply_markup(user.chat_id, message_id,
        #                                reply_markup=list_tg_accounts(user.chat_id, service))
        bot_.send_message(user.chat_id, f"–ê–∫–∫–∞—É–Ω—Ç [<i>{user_data.get('phone')}</i>]  —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        await state.finish()

    except PendingRollbackError:
        session.rollback()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –±–æ—Ç–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ")
        await state.finish()
